--Here I have some some query examples that I excecuted on a dataset for a Furtune 500 company with information on their sales.
-- These are examples of queries I would to find what each question is asking.

1.Write a query to return the customer_name, product_name, and total_amount for each sale in the last 30 days.
SELECT 
    c.customer_name, 
    p.product_name, 
    s.total_amount
FROM Sales s
JOIN Customers c ON s.customer_id = c.customer_id
JOIN Products p ON s.product_id = p.product_id
WHERE s.sale_date >= CURDATE() - INTERVAL 30 DAY;

2.Write a query to find the total revenue generated by each product category in the last year. The output should include the product category and the total revenue for that category.
SELECT 
    p.category, 
    SUM(s.total_amount) AS total_revenue
FROM Sales s
JOIN Products p ON s.product_id = p.product_id
WHERE s.sale_date >= CURDATE() - INTERVAL 1 YEAR
GROUP BY p.category;
3.Write a query to return all customers who made purchases in 2023 and are located in the "West" region.
SELECT DISTINCT 
    c.customer_name
FROM Sales s
JOIN Customers c ON s.customer_id = c.customer_id
WHERE c.sales_region = 'West'
  AND YEAR(s.sale_date) = 2023;

4.Write a query to display the total number of sales, total quantity sold, and total revenue for each customer. The result should include the customer_name, total sales, total quantity, and total revenue.
SELECT 
    c.customer_name, 
    COUNT(s.sales_id) AS total_sales, 
    SUM(s.quantity) AS total_quantity, 
    SUM(s.total_amount) AS total_revenue
FROM Sales s
JOIN Customers c ON s.customer_id = c.customer_id
GROUP BY c.customer_name;

5.Write a query to find the top 3 customers (by total revenue) in the year 2023.
SELECT 
    c.customer_name, 
    SUM(s.total_amount) AS total_revenue
FROM Sales s
JOIN Customers c ON s.customer_id = c.customer_id
WHERE YEAR(s.sale_date) = 2023
GROUP BY c.customer_name
ORDER BY total_revenue DESC
LIMIT 3;

6.Write a query to rank products by their total sales quantity in 2023. The result should include the product_name, total quantity sold, and rank.

SELECT 
    p.product_name, 
    SUM(s.quantity) AS total_quantity,
    RANK() OVER (ORDER BY SUM(s.quantity) DESC) AS product_rank
FROM Sales s
JOIN Products p ON s.product_id = p.product_id
WHERE YEAR(s.sale_date) = 2023
GROUP BY p.product_name;

7.Write a query that categorizes customers into "New" (if they signed up in the last 6 months) or "Existing" based on their sign_up_date. Include the customer_name, region, and category in the result.
SELECT 
    c.customer_name, 
    c.sales_region, 
    CASE 
        WHEN c.sign_up_date >= CURDATE() - INTERVAL 6 MONTH THEN 'New'
        ELSE 'Existing'
    END AS customer_category
FROM Customers c;

8.Write a query to return the month and year along with the total sales for each month for the last 12 months.
SELECT 
    DATE_FORMAT(s.sale_date, '%Y-%m') AS month_year, 
    SUM(s.total_amount) AS total_sales
FROM Sales s
WHERE s.sale_date >= CURDATE() - INTERVAL 12 MONTH
GROUP BY month_year
ORDER BY month_year;

9.Write a query to return the product categories that generated more than $50,000 in revenue during the last 6 months.
SELECT 
    p.category, 
    SUM(s.total_amount) AS total_revenue
FROM Sales s
JOIN Products p ON s.product_id = p.product_id
WHERE s.sale_date >= CURDATE() - INTERVAL 6 MONTH
GROUP BY p.category
HAVING total_revenue > 50000;

10Write a query to check for any sales where the total_amount doesnâ€™t match the expected value (i.e., quantity * price).
SELECT 
    s.sales_id, 
    c.customer_name, 
    p.product_name, 
    s.quantity, 
    p.price, 
    s.total_amount,
    (s.quantity * p.price) AS expected_amount
FROM Sales s
JOIN Products p ON s.product_id = p.product_id
JOIN Customers c ON s.customer_id = c.customer_id
WHERE s.total_amount != (s.quantity * p.price);
